---- IMPORTS ----

import {
	* "stdio.h"
}

---- STATEMENTS ----
c <- $c + 8;
printf("a = %d | b = %d | c = %d\n", a, $b, $c);
printf("Hello, World!\n");
printf("factorial: %d\n", factorial(a));
printf("fibonacci: %d\n", fibonacci(a));
printf("mult (%d, %d): %d\n", 4, 5, mult(4, 5, 0));
printf("exponent (%d, %d): %d\n", 2, 4, exponent(2, 4, 0));

---- DECLARATIONS ----

[a : $u32 = 6]
[b : u32 <- 5]
[c : u32 = b]

[m : $MyStruct]
m.b = 57;
	printf("m.b = %d\n", m.b);

struct MyStruct :[
	[a: u8]
	[b : $u16 = 58]
	--[c: u8]
]

[factorial = (n : $u32) -> [x : $u32] {
	x = if (n > 1) then n * this(n-1) else 1;
}]

[fibonacci = (n: $u32) -> [result : $u32] {
	result =   if (n > 1) then this(n-1) + this(n-2) 
			else if (n == 1) then 1
			else 0;
}]

[mult = (f1: $u32, f2: $u32, n: $u32) -> [x : $u32] {
	x = if (n < f2) then f1 + this(f1, f2, n+1) else 0;
}]

[exponent = (base: $u32, e: $u32, n: $u32) -> [x : $u32] {
	x = if (n < e) then base * this(base, e, n+1) else 1;
}]

-------------------------------------------------------------------------------------------


----- DEMO OF NESTED FUNCTION -----
printf("p: %d\n", p());

[p = () -> [x5 : $u8] {

	

	x5 = ch() + 1;
	
	[ch = () -> [x6 : $u32] {
		x6 = 5;
	}]

}]

|""

[f1 = {
	loop(i, 10);
	printf("loop result: %d", i);

	[i : u32 = 0]
	[loop = (i_capture : u32, acc : $u32) -> res: $u32{
		res = if (acc < 10) loop(i_capture, acc-1) else (i_capture <- acc);
	}]


}]
